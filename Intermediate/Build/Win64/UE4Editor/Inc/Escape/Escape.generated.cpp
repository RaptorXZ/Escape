// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Escape.h"
#include "GeneratedCppIncludes.h"
#include "Escape.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1Escape() {}
	void UBeingWatched::StaticRegisterNativesUBeingWatched()
	{
	}
	IMPLEMENT_CLASS(UBeingWatched, 2977506008);
	void AEscapeGameMode::StaticRegisterNativesAEscapeGameMode()
	{
	}
	IMPLEMENT_CLASS(AEscapeGameMode, 475290384);
	void UReact::StaticRegisterNativesUReact()
	{
		FNativeFunctionRegistrar::RegisterFunction(UReact::StaticClass(), "CreateOutline",(Native)&UReact::execCreateOutline);
		FNativeFunctionRegistrar::RegisterFunction(UReact::StaticClass(), "HandleProgress",(Native)&UReact::execHandleProgress);
		FNativeFunctionRegistrar::RegisterFunction(UReact::StaticClass(), "UReaction",(Native)&UReact::execUReaction);
	}
	IMPLEMENT_CLASS(UReact, 790322135);
	void UInteract::StaticRegisterNativesUInteract()
	{
	}
	IMPLEMENT_CLASS(UInteract, 1183994335);
	void UOpenDoor::StaticRegisterNativesUOpenDoor()
	{
		FNativeFunctionRegistrar::RegisterFunction(UOpenDoor::StaticClass(), "HandleProgress",(Native)&UOpenDoor::execHandleProgress);
	}
	IMPLEMENT_CLASS(UOpenDoor, 2893329526);
	void UPositionReport::StaticRegisterNativesUPositionReport()
	{
	}
	IMPLEMENT_CLASS(UPositionReport, 526835896);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterial_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameMode();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveFloat_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerVolume_NoRegister();

	ESCAPE_API class UClass* Z_Construct_UClass_UBeingWatched_NoRegister();
	ESCAPE_API class UClass* Z_Construct_UClass_UBeingWatched();
	ESCAPE_API class UClass* Z_Construct_UClass_AEscapeGameMode_NoRegister();
	ESCAPE_API class UClass* Z_Construct_UClass_AEscapeGameMode();
	ESCAPE_API class UFunction* Z_Construct_UFunction_UReact_CreateOutline();
	ESCAPE_API class UFunction* Z_Construct_UFunction_UReact_HandleProgress();
	ESCAPE_API class UFunction* Z_Construct_UFunction_UReact_UReaction();
	ESCAPE_API class UClass* Z_Construct_UClass_UReact_NoRegister();
	ESCAPE_API class UClass* Z_Construct_UClass_UReact();
	ESCAPE_API class UFunction* Z_Construct_UDelegateFunction_Escape_React__DelegateSignature();
	ESCAPE_API class UClass* Z_Construct_UClass_UInteract_NoRegister();
	ESCAPE_API class UClass* Z_Construct_UClass_UInteract();
	ESCAPE_API class UFunction* Z_Construct_UFunction_UOpenDoor_HandleProgress();
	ESCAPE_API class UClass* Z_Construct_UClass_UOpenDoor_NoRegister();
	ESCAPE_API class UClass* Z_Construct_UClass_UOpenDoor();
	ESCAPE_API class UClass* Z_Construct_UClass_UPositionReport_NoRegister();
	ESCAPE_API class UClass* Z_Construct_UClass_UPositionReport();
	ESCAPE_API class UPackage* Z_Construct_UPackage__Script_Escape();
	UClass* Z_Construct_UClass_UBeingWatched_NoRegister()
	{
		return UBeingWatched::StaticClass();
	}
	UClass* Z_Construct_UClass_UBeingWatched()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage__Script_Escape();
			OuterClass = UBeingWatched::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PlayerRot = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlayerRot"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PlayerRot, UBeingWatched), 0x0040000000020001, Z_Construct_UScriptStruct_FRotator());
				UProperty* NewProp_OwnerLoc = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OwnerLoc"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OwnerLoc, UBeingWatched), 0x0040000000020001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_LookVector = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LookVector"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LookVector, UBeingWatched), 0x0040000000020001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_LookRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LookRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LookRotation, UBeingWatched), 0x0040000000020001, Z_Construct_UScriptStruct_FRotator());
				UProperty* NewProp_NewMat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NewMat"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NewMat, UBeingWatched), 0x0040000000000001, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_Owner = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Owner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Owner, UBeingWatched), 0x0040000000020001, Z_Construct_UClass_AActor_NoRegister());
				UProperty* NewProp_ActorThatSees = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActorThatSees"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ActorThatSees, UBeingWatched), 0x0040000000020001, Z_Construct_UClass_AActor_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Custom"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BeingWatched.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("BeingWatched.h"));
				MetaData->SetValue(NewProp_PlayerRot, TEXT("Category"), TEXT("BeingWatched"));
				MetaData->SetValue(NewProp_PlayerRot, TEXT("ModuleRelativePath"), TEXT("BeingWatched.h"));
				MetaData->SetValue(NewProp_PlayerRot, TEXT("ToolTip"), TEXT("Rotation for player to look at Actor"));
				MetaData->SetValue(NewProp_OwnerLoc, TEXT("Category"), TEXT("BeingWatched"));
				MetaData->SetValue(NewProp_OwnerLoc, TEXT("ModuleRelativePath"), TEXT("BeingWatched.h"));
				MetaData->SetValue(NewProp_OwnerLoc, TEXT("ToolTip"), TEXT("Actor's location"));
				MetaData->SetValue(NewProp_LookVector, TEXT("Category"), TEXT("BeingWatched"));
				MetaData->SetValue(NewProp_LookVector, TEXT("ModuleRelativePath"), TEXT("BeingWatched.h"));
				MetaData->SetValue(NewProp_LookRotation, TEXT("Category"), TEXT("BeingWatched"));
				MetaData->SetValue(NewProp_LookRotation, TEXT("ModuleRelativePath"), TEXT("BeingWatched.h"));
				MetaData->SetValue(NewProp_LookRotation, TEXT("ToolTip"), TEXT("Player's viewpoint"));
				MetaData->SetValue(NewProp_NewMat, TEXT("Category"), TEXT("BeingWatched"));
				MetaData->SetValue(NewProp_NewMat, TEXT("ModuleRelativePath"), TEXT("BeingWatched.h"));
				MetaData->SetValue(NewProp_Owner, TEXT("Category"), TEXT("BeingWatched"));
				MetaData->SetValue(NewProp_Owner, TEXT("ModuleRelativePath"), TEXT("BeingWatched.h"));
				MetaData->SetValue(NewProp_Owner, TEXT("ToolTip"), TEXT("Pawn inherits from actor"));
				MetaData->SetValue(NewProp_ActorThatSees, TEXT("Category"), TEXT("BeingWatched"));
				MetaData->SetValue(NewProp_ActorThatSees, TEXT("ModuleRelativePath"), TEXT("BeingWatched.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBeingWatched(Z_Construct_UClass_UBeingWatched, &UBeingWatched::StaticClass, TEXT("UBeingWatched"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBeingWatched);
	UClass* Z_Construct_UClass_AEscapeGameMode_NoRegister()
	{
		return AEscapeGameMode::StaticClass();
	}
	UClass* Z_Construct_UClass_AEscapeGameMode()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AGameMode();
			Z_Construct_UPackage__Script_Escape();
			OuterClass = AEscapeGameMode::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2090028C;


				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Info Rendering MovementReplication Replication Actor Input Movement Collision Rendering Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EscapeGameMode.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("EscapeGameMode.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AEscapeGameMode(Z_Construct_UClass_AEscapeGameMode, &AEscapeGameMode::StaticClass, TEXT("AEscapeGameMode"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AEscapeGameMode);
	UFunction* Z_Construct_UFunction_UReact_CreateOutline()
	{
		UObject* Outer=Z_Construct_UClass_UReact();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateOutline"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("React.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates an outline around the object when it's looked at to highlight it"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UReact_HandleProgress()
	{
		struct React_eventHandleProgress_Parms
		{
			float Value;
		};
		UObject* Outer=Z_Construct_UClass_UReact();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HandleProgress"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535, sizeof(React_eventHandleProgress_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Value, React_eventHandleProgress_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("React.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Function handling the object's rotation progress"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UReact_UReaction()
	{
		UObject* Outer=Z_Construct_UClass_UReact();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("UReaction"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("React.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Function called when player interacts with this object"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UReact_NoRegister()
	{
		return UReact::StaticClass();
	}
	UClass* Z_Construct_UClass_UReact()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage__Script_Escape();
			OuterClass = UReact::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UReact_CreateOutline());
				OuterClass->LinkChild(Z_Construct_UFunction_UReact_HandleProgress());
				OuterClass->LinkChild(Z_Construct_UFunction_UReact_UReaction());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CurveFloat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurveFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CurveFloat, UReact), 0x0040000000000001, Z_Construct_UClass_UCurveFloat_NoRegister());
				UProperty* NewProp_RollRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RollRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RollRotation, UReact), 0x0040000000000001);
				UProperty* NewProp_PitchRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PitchRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PitchRotation, UReact), 0x0040000000000001);
				UProperty* NewProp_YawRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("YawRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(YawRotation, UReact), 0x0040000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanRotateBack, UReact, bool);
				UProperty* NewProp_bCanRotateBack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCanRotateBack"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanRotateBack, UReact), 0x0040000000000001, CPP_BOOL_PROPERTY_BITMASK(bCanRotateBack, UReact), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldRotate, UReact, bool);
				UProperty* NewProp_bShouldRotate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShouldRotate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldRotate, UReact), 0x0040000000000001, CPP_BOOL_PROPERTY_BITMASK(bShouldRotate, UReact), sizeof(bool), true);
				UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Text, UReact), 0x0040000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldHighlight, UReact, bool);
				UProperty* NewProp_bShouldHighlight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShouldHighlight"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldHighlight, UReact), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bShouldHighlight, UReact), sizeof(bool), true);
				UProperty* NewProp_MeshComp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MeshComp"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MeshComp, UReact), 0x0010000000080008, Z_Construct_UClass_UStaticMeshComponent_NoRegister());
				UProperty* NewProp_Owner = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Owner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Owner, UReact), 0x0010000000000000, Z_Construct_UClass_AActor_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UReact_CreateOutline(), "CreateOutline"); // 1482056340
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UReact_HandleProgress(), "HandleProgress"); // 1565107978
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UReact_UReaction(), "UReaction"); // 2623361817
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Custom"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("React.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("React.h"));
				MetaData->SetValue(NewProp_CurveFloat, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_CurveFloat, TEXT("EditCondition"), TEXT("bShouldRotate"));
				MetaData->SetValue(NewProp_CurveFloat, TEXT("ModuleRelativePath"), TEXT("React.h"));
				MetaData->SetValue(NewProp_CurveFloat, TEXT("ToolTip"), TEXT("Curve used to lerp the object between rotations"));
				MetaData->SetValue(NewProp_RollRotation, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_RollRotation, TEXT("EditCondition"), TEXT("bShouldRotate"));
				MetaData->SetValue(NewProp_RollRotation, TEXT("ModuleRelativePath"), TEXT("React.h"));
				MetaData->SetValue(NewProp_RollRotation, TEXT("ToolTip"), TEXT("Amount by which this object will rotate by Roll when interacted with"));
				MetaData->SetValue(NewProp_PitchRotation, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_PitchRotation, TEXT("EditCondition"), TEXT("bShouldRotate"));
				MetaData->SetValue(NewProp_PitchRotation, TEXT("ModuleRelativePath"), TEXT("React.h"));
				MetaData->SetValue(NewProp_PitchRotation, TEXT("ToolTip"), TEXT("Amount by which this object will rotate by Pitch when interacted with"));
				MetaData->SetValue(NewProp_YawRotation, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_YawRotation, TEXT("EditCondition"), TEXT("bShouldRotate"));
				MetaData->SetValue(NewProp_YawRotation, TEXT("ModuleRelativePath"), TEXT("React.h"));
				MetaData->SetValue(NewProp_YawRotation, TEXT("ToolTip"), TEXT("Amount by which this object will rotate by Yaw when interacted with"));
				MetaData->SetValue(NewProp_bCanRotateBack, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_bCanRotateBack, TEXT("EditCondition"), TEXT("bShouldRotate"));
				MetaData->SetValue(NewProp_bCanRotateBack, TEXT("ModuleRelativePath"), TEXT("React.h"));
				MetaData->SetValue(NewProp_bCanRotateBack, TEXT("ToolTip"), TEXT("If true, this object can be rotated back to its original rotation\nif interacted with again"));
				MetaData->SetValue(NewProp_bShouldRotate, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_bShouldRotate, TEXT("ModuleRelativePath"), TEXT("React.h"));
				MetaData->SetValue(NewProp_bShouldRotate, TEXT("ToolTip"), TEXT("If true, this object will rotate when interacted with"));
				MetaData->SetValue(NewProp_Text, TEXT("Category"), TEXT("Text"));
				MetaData->SetValue(NewProp_Text, TEXT("ModuleRelativePath"), TEXT("React.h"));
				MetaData->SetValue(NewProp_Text, TEXT("MultiLine"), TEXT(""));
				MetaData->SetValue(NewProp_Text, TEXT("ToolTip"), TEXT("Text displayed when this object is interacted with.\nIf left blank, no text will be displayed."));
				MetaData->SetValue(NewProp_bShouldHighlight, TEXT("Category"), TEXT("Highlight"));
				MetaData->SetValue(NewProp_bShouldHighlight, TEXT("ModuleRelativePath"), TEXT("React.h"));
				MetaData->SetValue(NewProp_bShouldHighlight, TEXT("ToolTip"), TEXT("If true, this object will be highlighted when looked at within interactable\nreach by the player"));
				MetaData->SetValue(NewProp_MeshComp, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_MeshComp, TEXT("ModuleRelativePath"), TEXT("React.h"));
				MetaData->SetValue(NewProp_Owner, TEXT("ModuleRelativePath"), TEXT("React.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UReact(Z_Construct_UClass_UReact, &UReact::StaticClass, TEXT("UReact"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UReact);
	UFunction* Z_Construct_UDelegateFunction_Escape_React__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage__Script_Escape();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("React__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Interact.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UInteract_NoRegister()
	{
		return UInteract::StaticClass();
	}
	UClass* Z_Construct_UClass_UInteract()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage__Script_Escape();
			OuterClass = UInteract::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Reach = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Reach"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Reach, UInteract), 0x0040000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Custom"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Interact.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Interact.h"));
				MetaData->SetValue(NewProp_Reach, TEXT("Category"), TEXT("Interact"));
				MetaData->SetValue(NewProp_Reach, TEXT("ModuleRelativePath"), TEXT("Interact.h"));
				MetaData->SetValue(NewProp_Reach, TEXT("ToolTip"), TEXT("How far the player can interact with objects (in cm)"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInteract(Z_Construct_UClass_UInteract, &UInteract::StaticClass, TEXT("UInteract"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInteract);
	UFunction* Z_Construct_UFunction_UOpenDoor_HandleProgress()
	{
		struct OpenDoor_eventHandleProgress_Parms
		{
			float Value;
		};
		UObject* Outer=Z_Construct_UClass_UOpenDoor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HandleProgress"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00040401, 65535, sizeof(OpenDoor_eventHandleProgress_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Value, OpenDoor_eventHandleProgress_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("OpenDoor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Function handling the door's rotation progress"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UOpenDoor_NoRegister()
	{
		return UOpenDoor::StaticClass();
	}
	UClass* Z_Construct_UClass_UOpenDoor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage__Script_Escape();
			OuterClass = UOpenDoor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UOpenDoor_HandleProgress());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AudioComp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AudioComp"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AudioComp, UOpenDoor), 0x0040000000080008, Z_Construct_UClass_UAudioComponent_NoRegister());
				UProperty* NewProp_PressurePlate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PressurePlate"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PressurePlate, UOpenDoor), 0x0040000000000001, Z_Construct_UClass_ATriggerVolume_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Open, UOpenDoor, bool);
				UProperty* NewProp_Open = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Open"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Open, UOpenDoor), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(Open, UOpenDoor), sizeof(bool), true);
				UProperty* NewProp_CurveFloat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurveFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CurveFloat, UOpenDoor), 0x0010000000000001, Z_Construct_UClass_UCurveFloat_NoRegister());
				UProperty* NewProp_OpenDegree = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OpenDegree"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(OpenDegree, UOpenDoor), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UOpenDoor_HandleProgress(), "HandleProgress"); // 2238601678
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Custom"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("OpenDoor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("OpenDoor.h"));
				MetaData->SetValue(NewProp_AudioComp, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AudioComp, TEXT("ModuleRelativePath"), TEXT("OpenDoor.h"));
				MetaData->SetValue(NewProp_PressurePlate, TEXT("Category"), TEXT("OpenDoor"));
				MetaData->SetValue(NewProp_PressurePlate, TEXT("ModuleRelativePath"), TEXT("OpenDoor.h"));
				MetaData->SetValue(NewProp_PressurePlate, TEXT("ToolTip"), TEXT("The Trigger Volume causing the door to open"));
				MetaData->SetValue(NewProp_Open, TEXT("Category"), TEXT("OpenDoor"));
				MetaData->SetValue(NewProp_Open, TEXT("ModuleRelativePath"), TEXT("OpenDoor.h"));
				MetaData->SetValue(NewProp_Open, TEXT("ToolTip"), TEXT("Bool that tells us if the door is open or closed. Editable in editor\nso that doors can start as being either opened or closed initially"));
				MetaData->SetValue(NewProp_CurveFloat, TEXT("Category"), TEXT("Timeline"));
				MetaData->SetValue(NewProp_CurveFloat, TEXT("ModuleRelativePath"), TEXT("OpenDoor.h"));
				MetaData->SetValue(NewProp_CurveFloat, TEXT("ToolTip"), TEXT("The Curve used to lerp the door between open and closed"));
				MetaData->SetValue(NewProp_OpenDegree, TEXT("Category"), TEXT("Timeline"));
				MetaData->SetValue(NewProp_OpenDegree, TEXT("ModuleRelativePath"), TEXT("OpenDoor.h"));
				MetaData->SetValue(NewProp_OpenDegree, TEXT("ToolTip"), TEXT("Max rotation we want the door to open up to"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UOpenDoor(Z_Construct_UClass_UOpenDoor, &UOpenDoor::StaticClass, TEXT("UOpenDoor"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UOpenDoor);
	UClass* Z_Construct_UClass_UPositionReport_NoRegister()
	{
		return UPositionReport::StaticClass();
	}
	UClass* Z_Construct_UClass_UPositionReport()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage__Script_Escape();
			OuterClass = UPositionReport::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Custom"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PositionReport.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("PositionReport.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPositionReport(Z_Construct_UClass_UPositionReport, &UPositionReport::StaticClass, TEXT("UPositionReport"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPositionReport);
	UPackage* Z_Construct_UPackage__Script_Escape()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/Escape")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x65B96554;
			Guid.B = 0xAFA7D74A;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

			Z_Construct_UDelegateFunction_Escape_React__DelegateSignature();
		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
